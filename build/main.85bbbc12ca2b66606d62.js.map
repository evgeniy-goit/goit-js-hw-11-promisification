{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","all","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HACMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACXF,EAAQF,KACLA,OAMHK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,gEChBbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KACjE,OAAOjB,QAAQkB,IAAIH,IAGjBX,EAAS,SAAAW,GAAY,OAAIT,QAAQa,MAAMJ,IAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GChBrC,IAIMgB,EAAkB,SAACC,GACrB,IAL+BC,EAAKC,EAK9BzB,GALyBwB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMhD,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACMqB,KAAKE,SAAW,IAG3BzB,EAAQ,CAAC0B,GAAGN,EAAYM,GAAItB,KAAKP,IAEjCI,EAAOmB,EAAYM,MAC1B7B,OAID8B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAItB,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAGFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MACjCvB,KAAKoB,GACLI,MAAMH,GAEPT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MACjCvB,KAAKoB,GACLI,MAAMH,GAEPT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KACjCvB,KAAKoB,GACLI,MAAMH,GAEPT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MACjCvB,KAAKoB,GACLI,MAAMH,K","file":"main.85bbbc12ca2b66606d62.js","sourcesContent":["\r\nconst delay = ms => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n        resolve(ms);\r\n        }, ms);   \r\n    }\r\n    \r\n    )\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n      const updatedUsers = allUsers.map(user =>\r\n          user.name === userName ? { ...user, active: !user.active } : user);\r\n      return Promise.all(updatedUsers);\r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        return new Promise((resolve, reject) => { \r\n          setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve({id:transaction.id, time:delay});\r\n              } \r\n                reject(transaction.id);            \r\n      }, delay);\r\n    });\r\n  };\r\n  \r\n  const logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n\r\n  makeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n  makeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n  makeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n  makeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}